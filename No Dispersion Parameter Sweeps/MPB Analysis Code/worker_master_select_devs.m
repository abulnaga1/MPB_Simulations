
%%% Script that load the data generated by 'batch_submitter.cmd' that
%%% compiles the script 'wgd_on_SiO2.ctl' with different parameters. This
%%% scrit has to be in the folder in whith all al subfolders like '0.1-0.2'
%%% are generated
clear all
close all

%Parameters
%Import the parameters which were simulated
tuple_file = matfile('tuples.mat');
tuples = tuple_file.tuples;

%d = h, w = w2 for double block code
%h = tuples(:,1); % heights of the waveguide in units f a
%w = tuples(:,2); % widths of the waveguide in units of a

h = [0.22 0.22 0.3 0.22 0.2];
w = [0.925 0.4 0.375 0.9 0.5];

%Loading the data in the different subfolders
%Generates an N x 4 matrix where each row contains the data 
%[h w vg_diff mode_overlap]
N = length(h);
master_data = zeros(N,6);
vel_siv = zeros(N,1);
vel_tel = zeros(N,1);
vg_difference = zeros(N,1);
gvd_1250 = zeros(N,1);
gvd_zerocross = zeros(N,1);
mode_overlap = zeros(N,1);

%Import the group velocity data
%for each h, we sweep all possible w before moving to next h value
n=0;
for i = 1:length(h)
    for j = i%1:length(w)
        n=n+1;
        hname = num2str(h(i));
        wname = num2str(w(j));
        
        legend_string(i) = strcat("(", hname, ",", wname, ")");
                       
        %Calculate group velocity difference (absolute value)
        vg_difference(n) = vg_diff(hname,wname);              
               
        %Calculate the mode overlap
        %mode_overlap(n) = overlap_calculator(hname,wname);
        
        %Import the band data
        [freqs, kvals] = band_importer(hname,wname);
        
        %Import the group velocity data
        velocities = velocity_importer(hname,wname);
        
        %Calculate the GVD
        [GVD, gvd_1250(n), gvd_zerocross(n)] = gvd_calculator(freqs,velocities);
        
        %Compile all the data together
        master_data(n,:) = [h(i) w(j) vg_difference(n) abs(mode_overlap(n)) gvd_1250(n) gvd_zerocross(n)];         
                
    end
end
%Choose what data to plot and save
band_plotter(h,w,legend_string);
vg_plotter(h,w,legend_string);
GVD_plotter(h,w,legend_string);

%%
function [freqs, kvals] = band_importer(hname,wname)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     band_importer.m
%function [freqs, kvals] = band_importer(hname,wname)
%Description:       Given the dimensions of a waveguide, band_importer
%                   opens the corresponding folder hname-wname,
%                   imports the band data file, cleans up the data and
%                   stores the frequencies and the associated k vals
%                   in arrays of doubles which are returned
%Input Variables:   hname - height of waveguide in string format
%                   wname - width of waveguide in string format
%Output Variables:  kvals - array containing the simulated k-points
%                   freqs - the frequency associated with each k-point


%Import the data
folder=strcat(hname,'-',wname);
filename_bands = strcat('wg_gvd-',hname,'-',wname,'-bands.dat');        
file_bands = fullfile(folder,filename_bands);        
dataArray_bands = csvread(file_bands,1,1);
%Ignore the first k-point (k = 0,0,0) because there's no frequency value
%reported at this k-point
kvals = dataArray_bands(2:end,2);
freqs = dataArray_bands(2:end,end);

end

function velocities = velocity_importer(hname,wname)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     velocity_importer.m
%function velocities = velocity_importer(hname,wname)
%Description:       Given the dimensions of a waveguide, velocity_importer
%                   opens the corresponding folder hname-wname,
%                   imports the velocity data file, cleans up the data and
%                   stores it in an array of doubles which is returned
%Input Variables:   hname - height of waveguide in string format
%                   wname - width of waveguide in string format
%Output Variables:  velocities - array containing the group velocity at
%                   each simulated k-point

%Specify the data format in the file
formatSpec = '%*s%*s%s%[^\n\r]';
delimiter = ',';

%Import the data
folder=strcat(hname,'-',wname);
filename_vg = strcat('wg_gvd-',hname,'-',wname,'-vel.dat');
file_vg = fullfile(folder,filename_vg);
fileID_vg = fopen(file_vg,'r');
dataArray_vg = textscan(fileID_vg,formatSpec,'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);
fclose(fileID_vg);

%Clean up the data and store as a double which is returned
num_kpoints = length(dataArray_vg{1});
velocities = zeros(1,num_kpoints);
for i = 1:num_kpoints
    velocities_string = strsplit(dataArray_vg{1}(i));
    velocities(i) = str2double(erase(velocities_string(1),'#('));
end
%Get rid of the first k-point because MPB just sets everything to 0
%at the first k-point simulated, which is k =<0,0,0>
velocities = velocities(2:end);
end

function vg_mismatch = vg_diff(hname,wname)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     vg_diff.m
%function vg_mismatch = vg_diff(hname,wname)
%Description:       Given the dimensions of a waveguide, vg_diff
%                   opens the corresponding folder hname-wname
%                   imports the data files containing the value
%                   of group velocity at 946nm and 1550nm from MPB
%                   simulations and returns the difference
%Input Variables:   hname - height of waveguide in string format
%                   wname - width of waveguide in string format
%Output Variables:  vg_mismatch - the calculated mismatch in group velocity


%Describe the format of data in the .dat files
formatSpec = '%*s%*s%s%[^\n\r]';
delimiter = ',';

%Import the vg data
folder=strcat(hname,'-',wname);
filename_vel_siv = strcat('velocity_siv-',hname,'-',wname,'.dat');
filename_vel_tel = strcat('velocity_tel-',hname,'-',wname,'.dat');
file_vel_siv = fullfile(folder,filename_vel_siv);
file_vel_tel = fullfile(folder,filename_vel_tel);
fileID_siv = fopen(file_vel_siv,'r');
fileID_tel = fopen(file_vel_tel,'r');
dataArray_siv = textscan(fileID_siv,formatSpec,'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);
dataArray_tel = textscan(fileID_tel,formatSpec,'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);
fclose(fileID_siv);
fclose(fileID_tel);

%Clean up the data and format as double
vel_siv_string = strsplit(string(dataArray_siv(1)));
vel_siv = str2double(erase(vel_siv_string(1),'#('));
vel_tel_string = strsplit(string(dataArray_tel(1)));
vel_tel = str2double(erase(vel_tel_string(1),'#('));

%calculate and return the vg_mismatch
vg_mismatch = abs(1/vel_siv-1/vel_tel);
end

function overlap = overlap_calculator(hname,wname)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     overlap_calculator.m
%function overlap = overlap_calculator(hname,wname)
%Description:       Given the dimensions of a waveguide, overlap_calculator
%                   opens the corresponding folder hname-wname,
%                   imports the field data files, cleans up the data, and
%                   calculates the mode overlap between the fields at 946nm
%                   and 1550nm
%Input Variables:   hname - height of waveguide in string format
%                   wname - width of waveguide in string format
%Output Variables:  overlap - the computed mode overlap between the fields
%                             at 946nm and 1550nm

%Import the dielectric function
folder=strcat(hname,'-',wname);

epsilon_file = strcat('epsilon-',hname,'-',wname,'.txt');
epsilon = importdata(fullfile(folder,epsilon_file));
    
%Import the E-fields
e_tel_file = strcat('e-1550-h-',hname,'-w-',wname,'-');
e_siv_file = strcat('e-946-h-',hname,'-w-',wname,'-'); 
    
E_tel_x = importdata(fullfile(folder,strcat(e_tel_file,'x-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_tel_file,'x-i.txt')));
E_tel_y = importdata(fullfile(folder,strcat(e_tel_file,'y-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_tel_file,'y-i.txt')));
E_tel_z = importdata(fullfile(folder,strcat(e_tel_file,'z-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_tel_file,'z-i.txt')));

E_siv_x = importdata(fullfile(folder,strcat(e_siv_file,'x-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_siv_file,'x-i.txt')));
E_siv_y = importdata(fullfile(folder,strcat(e_siv_file,'y-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_siv_file,'y-i.txt')));
E_siv_z = importdata(fullfile(folder,strcat(e_siv_file,'z-r.txt'))) + 1i.*importdata(fullfile(folder,strcat(e_siv_file,'z-i.txt')));

%Calculate the magnitude squared of the fields
E_siv_sq = E_siv_x.*conj(E_siv_x) + E_siv_y.*conj(E_siv_y) + E_siv_z.*conj(E_siv_z);
E_tel_sq = E_tel_x.*conj(E_tel_x) + E_tel_y.*conj(E_tel_y) + E_tel_z.*conj(E_tel_z);
        
%Calculate the Product of E1* E2
E_product = conj(E_siv_x).*E_tel_x + conj(E_siv_y).*E_tel_y + conj(E_siv_z).*E_tel_z; 

%Calculate the mode overlap in the waveguide only
wg_region = epsilon > 10;        %Boolean definition of wg region
        
E_product_wg = E_product.*wg_region;
E_siv_sq_wg = E_siv_sq.*wg_region;
E_tel_sq_wg = E_tel_sq.*wg_region;

overlap = (((trapz(trapz(E_product_wg))))^2)/((trapz(trapz(E_siv_sq_wg)))*(trapz(trapz(E_tel_sq_wg))));   %dimensionless quantity
end   

function [GVD, gvd_1250, gvd_zerocross] = gvd_calculator(freqs,velocities)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     gvd_calculator.m
%function overlap = gvd_calculator(velocities,kvals)
%Description:       Given data on the group veloicity at given k-points,
%                   gvd_calculator computes the group velocity dispersion
%                   data, and approximates the value of the GVD at 1250nm
%                   and the approximate zero-crossing wavelength using
%                   linear interpolation
%Input Variables:   freqs       - the frequency values used in the MPB 
%                                 simulation
%                   velocities  - the group velocity data at the associated
%                                 frequency points
%Output Variables:  GVD           - the GVD at the associated freq points
%                   gvd_1250      - the approximate GVD value at 1250nm
%                   gvd_zerocross - the approximate zero-crossing
%                                   wavelength

% D = d\beta_1 / d\lambda = d(1/vg)/d\lambda = -1/(vg)^2*d(vg)/d\lambda

%First convert the k-values to wavelengths in units of nm
c = physconst('LightSpeed');    %speed of light
a = 1e-6;                       %MPB unit cell size
wavelengths = 1e9*2*pi*c./(freqs.*(c*2*pi/a));

%Calculate the GVD
GVD = (-1e15./((c.*velocities).^2)).*(gradient(c.*velocities)./gradient(wavelengths)');

%Find the GVD Zero-cross point around 1250nm
gvd_zerocross = 0;
for i = 1:(length(GVD)-1)
    if GVD(i)<0 && GVD(i+1)>0
        gvd_zerocross = interp1(GVD(i:i+1),wavelengths(i:i+1),0);  
    end
    if GVD(i)>0 && GVD(i+1)<0
        gvd_zerocross = interp1(GVD(i:i+1),wavelengths(i:i+1),0);  
    end
end

%approximate the value of the GVD at 1250nm
gvd_1250 = interp1(wavelengths,GVD,1250);

end

function band_plotter(h,w,legend_string)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     band_plotter.m
%function overlap = band_plotter(xlimits,h,w)
%Description:       Given desired xlimits, and a set of parameters (h,w),
%                   band_plotter plots the dispersion curves for these
%                   parameters
%Input Variables:   xlimits - Desired x limits
%                   h       - waveguide heights
%                   w       - waveguide widths
%Output Variables:  Saves the plot in .png format


figure()
hold on;

for i = 1:length(h)
    for j = i%1:length(w)
        hname = num2str(h(i));
        wname = num2str(w(j));
        [freqs, kvals] = band_importer(hname,wname);
        plot(kvals,freqs)
    end
end

%Plot light lines
plot(kvals,kvals./sqrt(5.7),'--') % diamond
plot(kvals,kvals./sqrt(11.67),'--') % GaAs
hold off;

title('Band Dispersion in MPB Units')
ylabel('wa/2\pic')
xlabel('ka/2\pi')
legend(legend_string)
xlim([0 5])
saveas(gcf,'top_dev_zoomout_Band_Dispersion.fig');

end

function vg_plotter(h,w,legend_string)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     vg_plotter.m
%function overlap = vg_plotter(xlimits,h,w)
%Description:       Given desired xlimits, and a set of parameters (h,w),
%                   band_plotter plots the group velocity dispersion
%                   curves for these parameters
%Input Variables:   xlimits - Desired x limits
%                   h       - waveguide heights
%                   w       - waveguide widths
%Output Variables:  Saves the plot in .png format


figure()
hold on;
c = physconst('LightSpeed');    %speed of light
a = 1e-6;

for i = 1:length(h)
    for j = i%1:length(w)
        hname = num2str(h(i));
        wname = num2str(w(j));
        [freqs, kvals] = band_importer(hname,wname);
        velocities = velocity_importer(hname,wname);
        wavelengths = 1e9*2*pi*c./(freqs.*(c*2*pi/a));
        
        plot(wavelengths,velocities);
    end
end

%Plot vertical lines at 946nm and 1550nm
xline(946,'k--');
xline(1550,'k--');

title('Group velocity vs wavelength')
xlabel('\lambda (nm)')
ylabel('vg/c')
legend(legend_string)
%xlim([0 5000]);
saveas(gcf,'top_dev_zoomout_Vg_vs_L_real_units.fig');

end

function GVD_plotter(h,w,legend_string)
%Authors:   Alex Abulnaga, Sacha Welinski
%Date:      2019-08-15
%Title:     GVD_plotter.m
%function overlap = GVD_plotter(xlimits,h,w)
%Description:       Given desired xlimits, and a set of parameters (h,w),
%                   band_plotter plots the GVD curves for these
%                   parameters
%Input Variables:   xlimits - Desired x limits
%                   h       - waveguide heights
%                   w       - waveguide widths
%Output Variables:  Saves the plot in .png format

c = physconst('LightSpeed');    %speed of light
a = 1e-6;

figure()
hold on;

for i = 1:length(h)
    for j = i%1:length(w)
        hname = num2str(h(i));
        wname = num2str(w(j));
        
        freqs = band_importer(hname,wname);
        velocities = velocity_importer(hname,wname);
        GVD = gvd_calculator(freqs,velocities);
        wavelengths = 1e9*2*pi*c./(freqs.*(c*2*pi/a));
        
        plot(wavelengths,GVD);
    end
end
plot(wavelengths,zeros(size(wavelengths)),'k--');
hold on;
xline(1250,'k--');
title('Group Velocity Dispersion')
xlabel('Wavelength (nm)')
ylabel('D (ps.km^{-1}.nm^{-1})')
legend(legend_string)
xlim([700 10000])
saveas(gcf,'top_dev_zoomout_GVD_Curves.fig')
end


